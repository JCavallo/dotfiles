#!/bin/bash

hex_to_rgb () {
    # From https://stackoverflow.com/questions/7253235/convert-hexadecimal-color-to-decimal-rgb-values-in-unix-shell-script
    printf "%d %d %d\n" 0x${1:0:2} 0x${1:2:2} 0x${1:4:2}
}

color_map() {
    for fgbg in 38 48 ; do # Foreground / Background
        for color in {0..255} ; do # Colors
            # Display the color
            printf "\e[${fgbg};5;%sm  %3s  \e[0m" $color $color
            # Display 6 colors per lines
            if [ $((($color + 1) % 6)) == 4 ] ; then
                echo
            fi
        done
        echo
    done
}

_colors () {
    local canary="$HOME/.local/.current_theme"
    local current_theme=dark
    if [[ -e "$canary" ]]; then
        current_theme=$(cat "$canary")
    fi

    declare -A colors
    if [[ "$current_theme" = "dark" ]]; then
        colors[grey]='243'
        colors[green]='40'
        colors[yellow]='220'
        colors[blue]='21'
        colors[lightblue]='45'
        colors[red]='203'
        colors[lightred]='196'
    else
        colors[grey]='243'
        colors[green]='40'
        colors[yellow]='220'
        colors[blue]='21'
        colors[lightblue]='45'
        colors[red]='203'
        colors[lightred]='196'
    fi
    return $colors
}

_color_cmd () {
    local canary="$HOME/.local/.current_theme"
    local current_theme=dark
    if [[ -e "$canary" ]]; then
        current_theme=$(cat "$canary")
    fi

    declare -A colors
    if [[ "$current_theme" = "dark" ]]; then
        colors[grey]='243'
        colors[green]='40'
        colors[yellow]='220'
        colors[blue]='27'
        colors[lightblue]='45'
        colors[red]='203'
        colors[lightred]='196'
    else
        colors[grey]='243'
        colors[green]='40'
        colors[yellow]='94'
        colors[blue]='21'
        colors[lightblue]='45'
        colors[red]='203'
        colors[lightred]='196'
    fi

    if [[ "$1" = "print_colors" ]]; then
        for i in "${!colors[@]}"
        do
            echo -e "    \e[1;38;5;${colors[$i]}m$i\e[0m"
        done
        return
    fi

    local filter="$1"
    local color="$2"

    if [[ "$color" = "remove" ]]; then
        echo "\rg -v --line-buffered \"$filter\""
    else
        if test "${colors[$color]+isset}"; then
            color="${colors[$color]}"
        fi
        echo "\rg --color always --passthru --colors match:fg:$color --line-buffered \"$1\""
    fi
}

colorize() {
    if [ "$1" = "help" ]; then
        echo "Usage : colorize <pattern1> <color1> [pattern2 color2...] <input>"
        echo ""
        echo "Possible colors:"
        _color_cmd print_colors
        echo ""
        echo "Special value : 'remove' will filter out the pattern rather than colorizing it"
    else
        local cmd=$(_color_cmd "$1" "$2")
        shift
        shift
        while [ $# != 0 ]; do
            cmd="$cmd | $(_color_cmd "$1" "$2")"
            shift
            shift
        done

        eval "$cmd || true"
    fi
}

alias _color_debug='colorize DEBUG grey INFO green WARNING yellow ERROR red CRITICAL lightred'
alias _color_info='colorize DEBUG remove INFO green WARNING yellow ERROR red CRITICAL lightred'
alias _color_warning='colorize DEBUG remove INFO remove WARNING yellow ERROR red CRITICAL lightred'
