# Plugin manager {{{

# Core
[[plugins]]
repo = 'Shougo/dein.vim'

# Commands
[[plugins]]
repo = 'haya14busa/dein-command.vim'

# }}}

# Intelligence {{{

# Integrated LSP client
[[plugins]]
repo = 'neovim/nvim-lsp'
hook_source = '''
    lua require'nvim_lsp'.tsserver.setup{on_attach=require'diagnostic'.on_attach}
    lua require'nvim_lsp'.pyls.setup{on_attach=require'diagnostic'.on_attach}
'''

# Better looking LSP diagnostics
[[plugins]]
repo = 'nvim-lua/diagnostic-nvim'
hook_source = '''
    let g:diagnostic_enable_virtual_text = 0
    let g:diagnostic_virtual_text_prefix = '✖'

    sign define LspDiagnosticsErrorSign text=✖ texthl=LspDiagnosticsError linehl= numhl=
    sign define LspDiagnosticsWarningSign text=✖ texthl=LspDiagnosticsWarning linehl= numhl=
    sign define LspDiagnosticsInformationSign text=✖ texthl=LspDiagnosticsInformation linehl= numhl=
    sign define LspDiagnosticsHintSign text=✖ texthl=LspDiagnosticsHint linehl= numhl=

    function! SetDiagnosticHighlights()
        hi! clear LspDiagnosticsErrorSign
        hi! LspDiagnosticsErrorSign cterm=bold ctermfg=196 ctermbg=235 guifg=#00FFFF
        hi! clear LspDiagnosticsWarningSign
        hi! LspDiagnosticsWarningSign cterm=bold ctermfg=226 ctermbg=235 guifg=#00FFFF
        hi! clear LspDiagnosticsInformationSign
        hi! LspDiagnosticsInformationSign cterm=bold ctermfg=45 ctermbg=235 guifg=#00FFFF
        hi! clear LspDiagnosticsHintSign
        hi! LspDiagnosticsHintSign cterm=bold ctermfg=45 ctermbg=235 guifg=#00FFFF

        hi! clear LspDiagnosticsError
        hi! LspDiagnosticsError cterm=italic ctermfg=196 ctermbg=235
        hi! clear LspDiagnosticsWarning
        hi! LspDiagnosticsWarning cterm=italic ctermfg=226 ctermbg=235
        hi! clear LspDiagnosticsInformation
        hi! LspDiagnosticsInformation cterm=italic ctermfg=45 ctermbg=235
        hi! clear LspDiagnosticsHint
        hi! LspDiagnosticsHint cterm=italic ctermfg=45 ctermbg=235

        hi! clear LspDiagnosticsErrorFloating
        hi! LspDiagnosticsErrorFloating cterm=italic ctermfg=196 ctermbg=235
        hi! clear LspDiagnosticsWarningFloating
        hi! LspDiagnosticsWarningFloating cterm=italic ctermfg=226 ctermbg=235
        hi! clear LspDiagnosticsInformationFloating
        hi! LspDiagnosticsInformationFloating cterm=italic ctermfg=45 ctermbg=235
        hi! clear LspDiagnosticsHintFloating
        hi! LspDiagnosticsHintFloating cterm=italic ctermfg=45 ctermbg=235
    endfunction

    autocmd ColorScheme * call SetDiagnosticHighlights()
    autocmd CursorHold * lua vim.lsp.util.show_line_diagnostics()

lua << EOF
do
    local method = "textDocument/publishDiagnostics"
    local default_callback = vim.lsp.callbacks[method]
    vim.lsp.callbacks[method] = function(err, method, result, client_id)
        default_callback(err, method, result, client_id)
        if result and result.diagnostics then
            for _, v in ipairs(result.diagnostics) do
                v.bufnr = client_id
                v.lnum = v.range.start.line + 1
                v.col = v.range.start.character + 1
                v.text = v.message
            end
            vim.lsp.util.set_qflist(result.diagnostics)
        end
    end
end
EOF
'''

# Technical dependency for deoplete
[[plugins]]
repo = 'Shougo/context_filetype.vim'

# Completion interface
[[plugins]]
repo = 'Shougo/deoplete.nvim'
# depends = 'context_filetype.vim'
# on_event = 'CursorHold,InsertEnter'
hook_source = '''
    " <TAB>: completion.
    inoremap <silent><expr> <TAB>
        \ pumvisible() ? "\<C-n>" :
        \ <SID>check_back_space() ? "\<TAB>" :
        \ deoplete#manual_complete()
    function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~ '\s'
    endfunction

    " <S-TAB>: completion back.
    inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"

    inoremap <expr><C-g>       deoplete#refresh()
    inoremap <expr><C-e>       deoplete#cancel_popup()
    inoremap <silent><expr><C-l>       deoplete#complete_common_string()

    " Close preview after completion
    autocmd CompleteDone * pclose!
    call deoplete#custom#option('auto_refresh_delay', 100)
    let g:deoplete#enable_camel_case = 1

    " <CR>: close popup and save indent.
    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    function! s:my_cr_function() abort
    return pumvisible() ? deoplete#close_popup()."\<CR>" : "\<CR>"
    endfunction

    call deoplete#custom#option('keyword_patterns', {
        \ '_': '[a-zA-Z_]\k*\(?',
        \ })

    call deoplete#custom#source('_', 'matchers',
        \ ['matcher_fuzzy', 'matcher_length'])

    call deoplete#custom#source('look', 'filetypes', ['help', 'gitcommit',
            \ 'markdown', 'rst'])
    call deoplete#custom#option('ignore_sources', {
        \ '_': ['around', 'buffer'],
        \ })

    call deoplete#custom#source('tabnine', 'rank', 300)
    call deoplete#custom#source('tabnine', 'min_pattern_length', 2)
    call deoplete#custom#var('tabnine', {
        \ 'line_limit': 500,
        \ 'max_num_results': 20,
        \ })

    call deoplete#custom#source('_', 'converters', [
        \ 'converter_remove_paren',
        \ 'converter_remove_overlap',
        \ 'matcher_length',
        \ 'converter_truncate_abbr',
        \ 'converter_truncate_info',
        \ 'converter_truncate_menu',
        \ 'converter_auto_delimiter',
        \ ])
    call deoplete#custom#source('tabnine', 'converters', [
        \ 'converter_remove_overlap',
        \ 'converter_truncate_info',
        \ ])

    call deoplete#custom#option('keyword_patterns', {
        \ '_': '[a-zA-Z_]\k*\(?',
        \ 'tex': '[^\w|\s][a-zA-Z_]\w*',
        \ })

    call deoplete#custom#option({
        \ 'auto_refresh_delay': 100,
        \ 'camel_case': v:true,
        \ 'skip_multibyte': v:true,
        \ 'prev_completion_mode': 'mirror',
        \ 'auto_preview': v:true,
        \ })
    call deoplete#enable()
'''
[plugins.ftplugin]
denite-filter = '''
    call deoplete#custom#buffer_option('auto_complete', v:false)
'''

# LSP based completion source
[[plugins]]
repo = 'Shougo/deoplete-lsp'

# Self-explanatory source
# [[plugins]]
# repo = 'fszymanski/deoplete-emoji'

# TabNine intelligent completion, resource consuming
# [[plugins]]
# repo = 'tbodt/deoplete-tabnine'
# build = './install.sh'
# }}}

# Alternative Intelligence {{{
# LSP client
# [[plugins]]
# repo = 'neoclide/coc.nvim'
# merged = 0
# rev = 'release'
# Syntax checking
# [[plugins]]
# repo = 'w0rp/ale'
# hook_add = '''
#     let g:ale_sign_error = '✖'
#     let g:ale_sign_warning = '✖'
#     let g:ale_sign_style_warning = '✖'
#     let g:ale_lint_on_text_changed = 'always'
#     let g:ale_lint_delay = 2000
#     let g:ale_fix_on_save = 1
#     let g:ale_rust_cargo_use_clippy = executable('cargo-clippy')
#     let g:ale_fixers = {}
# 
#     " NUKE FLOW TO OBLIVION. NEVER RUN FLOW. FLOW WILL CONSUME ALL YOUR RESOURCES
#     " AND BRING YOUR modern cutting edge hardware to a pathetic crawl. You will
#     " hard reboot daily. You will pull your hair out. You will hate life.
#     "
#     " UNLESS YOU DISABLE FLOW. DO THE RIGHT THING.
#     let g:ale_linters = {
#         \   'javascript': ['eslint', 'jscs', 'jshint', 'prettier',
#         \       'prettier-eslint', 'prettier-standard', 'standard', 'xo']}
# 
#     if executable('rustfmt')
#         let g:ale_fixers.rust = ['rustfmt']
#     endif
#     if executable('xmllint')
#         let g:ale_fixers.xml = ['xmllint']
#     endif
#     if executable('sqlfmt')
#         let g:ale_fixers.sql = ['sqlfmt']
#     endif
#     if executable('jq')
#         let g:ale_fixers.json = ['jq']
#     endif
#     autocmd ColorScheme *
#         \ hi clear ALEErrorSign |
#         \ hi ALEErrorSign cterm=bold ctermfg=196 ctermbg=235 |
#         \ hi clear ALEWarningSign |
#         \ hi ALEWarningSign cterm=bold ctermfg=226 ctermbg=235 |
#         \ hi clear ALEInfoSign |
#         \ hi ALEInfoSign cterm=bold ctermfg=45 ctermbg=235 |
#         \ hi clear ALEStyleErrorSign |
#         \ hi ALEStyleErrorSign cterm=bold ctermfg=45 ctermbg=235 |
#         \ hi clear ALEStyleWarningSign |
#         \ hi ALEStyleWarningSign cterm=bold ctermfg=45 ctermbg=235 |
#         \ hi clear ALEErrorline |
#         " \ hi ALEErrorline cterm=italic |
#         \ hi clear ALEWarningLine |
#         " \ hi ALEWarningLine cterm=italic |
#         \ hi clear ALEInfoLine |
#         " \ hi ALEInfoLine cterm=underline ctermfg=45
#         \ hi clear ALEStyleErrorLine |
#         \ hi clear ALEStyleWarningLine |
# '''
# }}}

# Fuzzy Search {{{

# Engine
[[plugins]]
repo = 'Shougo/denite.nvim'
# on_event = 'CursorHold'
# on_cmd = 'Denite'
hook_source = '''
    if executable("rg")
        call denite#custom#var('file/rec', 'command',
                \ ['rg', '--files', '--glob', '!.git'])
        call denite#custom#var('grep', 'command', ['rg', '--threads', '2'])
        call denite#custom#var('grep', 'recursive_opts', [])
        call denite#custom#var('grep', 'final_opts', [])
        call denite#custom#var('grep', 'separator', ['--'])
        call denite#custom#var('grep', 'default_opts',
                \ ['-i', '--vimgrep', '--no-heading'])
    elseif executable("ag")
        call denite#custom#var('file/rec', 'command',
                \ ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
    endif

    call denite#custom#source('tag', 'matchers', ['matcher/substring'])
    call denite#custom#source('file/old', 'converters',
        \ ['converter/relative_word'])

    call denite#custom#alias('source', 'file/rec/git', 'file/rec')
    call denite#custom#var('file/rec/git', 'command',
        \ ['git', 'ls-files', '-co', '--exclude-standard'])

    call denite#custom#option('default', {
        \ 'prompt': '❯',
        \ 'source_names': '',
        \ 'split': 'floating',
        \ 'start_filter': 'true',
        \ })

    call denite#custom#filter('matcher/ignore_globs', 'ignore_globs',
        \ [ '.git/', '.ropeproject/', '__pycache__/',
        \   'venv/', 'images/', '*.min.*', 'img/', 'fonts/'])

    function! s:i3_split(context)
        call I3Split(a:context['targets'][0].action__path)
    endfunction

    function! s:i3_vsplit(context)
        call I3VSplit(a:context['targets'][0].action__path)
    endfunction

    call denite#custom#action('file', 'i3_split', function('s:i3_split'))
    call denite#custom#action('file', 'i3_vsplit', function('s:i3_vsplit'))
'''
hook_add = '''
    function! GetProjectPath()
        if $PROJECT_PATH != ''
            return $PROJECT_PATH
        endif
        if $VIRTUAL_ENV != ''
            return $VIRTUAL_ENV
        endif
        return denite#util#path2project_directory(expand('%:p:h'), '')
    endfunction

    nnoremap <silent> <F1>  :<C-u>Denite help<CR>

    nnoremap <silent> [denite] <Nop>
    nmap <space> [denite]

    " Default file search
    nnoremap <silent> [denite]<Space> :<C-u>Denite buffer file/point file/old
            \ `finddir('.git', ';') != '' ? 'file/rec/git' : 'file/rec'`
            \ file file:new<CR>

    " File searches
    nnoremap <silent> [denite]fc :<C-u>DeniteBufferDir file/rec file:new<CR>
    nnoremap <silent> [denite]fd
        \ :<C-u>Denite file/rec file:new<CR>
    nnoremap <silent> [denite]fg
        \ :<C-u>DeniteProjectDir -path=`fnamemodify(bufname('%'), ':p:h')`
        \ file/rec<CR>
    nnoremap <silent> [denite]fp
        \ :<C-u>Denite file/rec:`GetProjectPath()`<CR>

    " Help
    nnoremap <silent> [denite]h :<C-u>Denite help<CR>

    " Buffers
    nnoremap <silent> [denite]i :<C-u>Denite buffer<CR>

    " Location history
    nnoremap <silent> [denite]k :<C-u>Denite change jump<CR>

    " Location list
    nnoremap <silent> [denite]l :<C-u>Denite
        \ -wincol=10 -winwidth=`&columns - 20`
        \ location_list -no-start-filter<CR>

    " Outline
    nnoremap <silent> [denite]o :<C-u>Denite
        \ -wincol=10 -winwidth=`&columns - 20`
        \ outline<CR>

    " Quickfix
    nnoremap <silent> [denite]q :<C-u>Denite
        \ -wincol=10 -winwidth=`&columns - 20`
        \ quickfix -no-start-filter<CR>

    " Registers
    nnoremap <silent> [denite]r
            \ :<C-u>Denite -buffer-name=register
            \ register neoyank<CR>

    " Replace with registers
    xnoremap <silent> [denite]r
            \ :<C-u>Denite -default-action=replace -buffer-name=register
            \ register neoyank<CR>

    " Searches
    " (S)earch word under cursor in current buffer directory
    nnoremap <silent> [denite]scc :DeniteBufferDir
        \ -wincol=10 -winwidth=`&columns - 20`
        \ grep:::<C-r><C-w><CR>
    " (S)earch prompted word in current buffer directory
    nnoremap <silent> [denite]scw :DeniteBufferDir
        \ -wincol=10 -winwidth=`&columns - 20`
        \ grep:::!<CR>
    " (S)earch word under cursor in current directory
    nnoremap <silent> [denite]sdc :DeniteCursorWord
        \ -wincol=10 -winwidth=`&columns - 20`
        \ grep<CR>
    " (S)earch prompted word in current directory
    nnoremap <silent> [denite]sdw :Denite
        \ -wincol=10 -winwidth=`&columns - 20`
        \ grep:::!<CR>
    " (S)earch word under cursor in current git project
    nnoremap <silent> [denite]sgc :DeniteProjectDir
        \ -path=`fnamemodify(bufname('%'), ':p:h')`
        \ -wincol=10 -winwidth=`&columns - 20`
        \ grep:::<C-r><C-w><CR>
    " (S)earch prompted word in current git project
    nnoremap <silent> [denite]sgw :DeniteProjectDir
        \ -wincol=10 -winwidth=`&columns - 20`
        \ -path=`fnamemodify(bufname('%'), ':p:h')` grep:::!<CR>
    " (S)earch word under cursor in current project
    nnoremap <silent> [denite]spc :DeniteCursorWord
        \ -wincol=10 -winwidth=`&columns - 20`
        \ grep:`GetProjectPath()`<CR>
    " (S)earch prompted word in current project
    nnoremap <silent> [denite]spw :Denite
        \ -wincol=10 -winwidth=`&columns - 20`
        \ grep:`GetProjectPath()`::!<CR>

    " Tag Search
    nnoremap <silent><expr> [denite]tc
        \ ":\<C-u>DeniteCursorWord -buffer-name=tag -immediately
        \  tag:include\<CR>"
    nnoremap <silent><expr> [denite]tt
        \ ":\<C-u>Denite -buffer-name=tag -immediately
        \  tag:include\<CR>"

    " Notes
    nnoremap <silent> [denite]w :<C-u>Denite file/rec/git:`g:note_directory`
        \ grep:`g:note_directory`::!
        \ file:new:`g:note_directory`
        \ -wincol=10 -winwidth=`&columns - 20`
        \ -matchers=matcher/regexp -sorters=sorter/word -auto-action=preview<CR>

    " Intelligent search
    nnoremap <expr> / line('$') > 10000 ? '/' :
        \ ":\<C-u>Denite
        \ -wincol=10 -winwidth=`&columns - 20`
        \ line\<CR>"
    nnoremap <expr> n line('$') > 10000 ? 'n' :
        \ ":\<C-u>Denite -buffer-name=search -resume -refresh
        \ -wincol=10 -winwidth=`&columns - 20`
        \ -no-start-filter\<CR>"
    nnoremap <expr> * line('$') > 10000 ? '*' :
        \ ":\<C-u>DeniteCursorWord
        \ -wincol=10 -winwidth=`&columns - 20`
        \ line\<CR>"

    " Keep a way to use normal search
    nnoremap <silent> [denite]/ /
    nnoremap <silent> [denite]? ?
    nnoremap <silent> [denite]* *
    nnoremap <silent> [denite]n n
    nnoremap <silent> [denite]N N


    nnoremap <silent> [denite]gs :<C-u>Denite gitstatus<CR>
    nnoremap <silent> [denite];
        \ :<C-u>Denite command command_history<CR>
'''

# Only in denite windows
[plugins.ftplugin]
denite = '''
" Define mappings
    nnoremap <silent><buffer><expr> A
        \ denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> <CR>
        \ denite#do_map('do_action')
    nnoremap <silent><buffer><expr> a
        \ denite#do_map('choose_action')
    nnoremap <silent><buffer><expr> d
        \ denite#do_map('do_action', 'delete')
    nnoremap <silent><buffer><expr> p
        \ denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> q
        \ denite#do_map('quit')
    nnoremap <silent><buffer><expr> '
        \ denite#do_map('quick_move')
    nnoremap <silent><buffer><expr> i
        \ denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> <Space>
        \ denite#do_map('toggle_select').'j'
    nnoremap <silent><buffer><expr> *
        \ denite#do_map('toggle_select_all')
    nnoremap <silent><buffer><expr> l
        \ denite#do_map('do_action', 'quickfix')
    nnoremap <silent><buffer><expr> <C-s>
        \ denite#do_map('do_action', 'i3_split')
    nnoremap <silent><buffer><expr> <C-v>
        \ denite#do_map('do_action', 'i3_vsplit')
'''
denite-filter = '''
    imap <silent><buffer> jk <Plug>(denite_filter_quit)
    imap <silent><buffer> kj <Plug>(denite_filter_quit)
    inoremap <silent><buffer><expr> <C-c> denite#do_map('quit')
    inoremap <silent><buffer><expr> <CR> denite#do_map('do_action', 'default')
    inoremap <silent><buffer><expr> <C-s> denite#do_map('do_action', 'i3_split')
    inoremap <silent><buffer><expr> <C-v> denite#do_map('do_action', 'i3_vsplit')
'''

# Extra sources (location list & co)
[[plugins]]
repo = 'neoclide/denite-extra'
# on_source = ['denite.nvim']

# Other possibility
# [[plugins]]
# repo = 'junegunn/fzf'
# [[plugins]]
# repo = 'yuki-ycino/fzf-preview.vim'

# }}}

# Snippets {{{

# Bas snippet engine
[[plugins]]
repo = 'SirVer/ultisnips.git'
# on_event = 'InsertCharPre'
# on_ft = 'snippets'
hook_source = '''
    let g:UltiSnipsExpandTrigger="<tab>"
    let g:UltiSnipsJumpForwardTrigger="<tab>"
    let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
'''

# Snippet collection
[[plugins]]
repo = 'honza/vim-snippets'

# VSCode style support
[[plugins]]
repo = 'hrsh7th/vim-vsnip'

# Deoplete integration
[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'
# }}}

# Git tools {{{
# Improve commit messages UI
[[plugins]]
repo = 'rhysd/committia.vim'

# Show commit under cursor
[[plugins]]
repo = 'rhysd/git-messenger.vim'
# on_cmd = 'GitMessenger'

# Git gutter
[[plugins]]
repo = 'mhinz/vim-signify'

# Better merge resolution
[[plugins]]
repo = 'rhysd/conflict-marker.vim'
# }}}

# Tools {{{

# Autocolorize color codes, etc...
[[plugins]]
# repo = 'RRethy/vim-hexokinase'
repo = 'norcalli/nvim-colorizer.lua'
hook_source = '''
    set termguicolors
    lua require'colorizer'.setup()
'''

# Show register contents
[[plugins]]
repo = 'junegunn/vim-peekaboo'

# View detailed history
[[plugins]]
repo = 'simnalamburt/vim-mundo'

# Scrath buffer
[[plugins]]
repo = 'mtth/scratch.vim'

# Repeat everything
[[plugins]]
repo = 'tpope/vim-repeat'

# Mappings browser
[[plugins]]
repo = 'liuchengxu/vim-which-key'

# Text Tables
[[plugins]]
repo = 'dhruvasagar/vim-table-mode'

# Local vimrc
[[plugins]]
repo = 'embear/vim-localvimrc'
hook_source = '''
    let g:localvimrc_persistent=1
'''

# Display doc in echo zone
[[plugins]]
repo = 'Shougo/echodoc.vim'
# on_event = 'CompleteDone'
hook_source = '''
    let g:echodoc#type = 'virtual'
    call echodoc#enable()
'''

# Auto sudo files I cannot read
[[plugins]]
repo = 'lambdalisue/suda.vim'
# on_event = 'BufRead'
hook_add = '''
    let g:suda_smart_edit = 1
'''
# }}}

# Editing {{{

# Reformat for alignment
[[plugins]]
repo = 'godlygeek/tabular'

# Split / Merge code lines
[[plugins]]
repo = 'AndrewRadev/splitjoin.vim'

# Auto parenthesis closing
[[plugins]]
repo = 'cohama/lexima.vim'

# Multi cursors
[[plugins]]
repo = 'mg979/vim-visual-multi'

# Swap text between operators (cxiw / cxa')
[[plugins]]
repo = 'tommcdo/vim-exchange'

# Auto display context (Bad for performances)
# [[plugins]]
# repo = 'wellle/context.vim'

# Nicer block editing
[[plugins]]
repo = 'kana/vim-niceblock'
# }}}

# Navigation {{{

# Highlight where f / F / t / T allows to go
[[plugins]]
repo = 'deris/vim-shot-f'

# General purpose navigation plugin
[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
    let g:EasyMotion_keys = 'lkjhqsdfgoiuzerpaytbvcxwmn,'
    let g:EasyMotion_startofline = 0
    let g:EasyMotion_show_prompt = 0
    let g:EasyMotion_verbose = 0
'''

# Faster j / k
[[plugins]]
repo = 'rhysd/accelerated-jk'
# on_map = {n = '<Plug>'}
hook_add = '''
    nmap <silent>j <Plug>(accelerated_jk_gj)
    nmap <silent>k <Plug>(accelerated_jk_gk)
'''

# Smooth scrolling
[[plugins]]
repo = 'yuttie/comfortable-motion.vim'

# Seemless tmux navigation
[[plugins]]
repo = 'christoomey/vim-tmux-navigator'
hook_add = '''
    let g:tmux_navigator_no_mappings = 1
'''

# Proper buffer deletion tools
[[plugins]]
repo = 'moll/vim-bbye'
# on_cmd = ['Bdelete', 'Bwipeout']

# Swap the contents of two windows
[[plugins]]
repo = 'wesQ3/vim-windowswap'
# }}}

# Custom Operators {{{

# Tooling
[[plugins]]
repo = 'kana/vim-textobj-user'
[[plugins]]
repo = 'kana/vim-operator-user'

# ie / ae
[[plugins]]
repo = 'kana/vim-textobj-entire'

# iz / az
[[plugins]]
repo = 'kana/vim-textobj-fold'

# ii / ai
[[plugins]]
repo = 'kana/vim-textobj-indent'

# il / al
[[plugins]]
repo = 'kana/vim-textobj-line'

# inside / arround / etc objects
[[plugins]]
repo = 'wellle/targets.vim'

# Improved % operator
[[plugins]]
repo = 'andymass/vim-matchup'

# Surround operators
[[plugins]]
repo = 'tpope/vim-surround'
# }}}

# Filetypes {{{

# Filetype types collection
[[plugins]]
repo = 'sheerun/vim-polyglot'
merged = 0
# hook_add = '''
# let g:polyglot_disabled = ['markdown', 'tsx', 'typescript', 'csv', 'nim',
#     \ 'python']
# '''

# Better folds in diff files
[[plugins]]
repo = 'thinca/vim-ft-diff_fold'

# Better folds in help files
[[plugins]]
repo = 'thinca/vim-ft-help_fold'

# Tryton
[[plugins]]
repo = 'jcavallo/tryton-vim'
# depends = ['denite.nvim', 'deoplete.nvim']
# on_ft = 'python'
hook_add = '''
    let g:tryton_default_mappings = 1
    let g:tryton_trytond_path = "$PROJECT_PATH/trytond"
    let g:tryton_server_host_name = 'local.master.local'
    let g:tryton_server_port = '8000'
    let g:tryton_server_login = 'admin'
'''
# }}}

# Appearance {{{

# Distraction free mode
[[plugins]]
repo = 'junegunn/goyo.vim'

# Extra focus
[[plugins]]
repo = 'junegunn/limelight.vim'

# Nice start screen
[[plugins]]
repo = 'mhinz/vim-startify'

# Show indentation lines (perf heavy)
[[plugins]]
repo = 'Yggdroot/indentLine'
hook_source = '''
    let g:indentLine_char = '▏'
'''

# Highlight after undo
[[plugins]]
repo = 'machakann/vim-highlightedundo'

# Highlight what was just yanked
[[plugins]]
repo = 'machakann/vim-highlightedyank'

# Different colors for parenthesis
[[plugins]]
repo = 'luochen1990/rainbow'
hook_source = '''
    let g:rainbow_active = 1
'''

# Nice icons
[[plugins]]
repo = 'ryanoasis/vim-devicons'

# Colorschemes
[[plugins]]
repo = 'jcavallo/flashy-vim'

[[plugins]]
repo = 'Canop/patine'

[[plugins]]
repo = 'jacoborus/tender.vim'
hook_source = '''
let g:terminal_color_background = '#000000'
let g:tender_italic = 1
let g:tender_bold = 1
'''

[[plugins]]
repo = 'axvr/photon.vim'

[[plugins]]
repo = 'altercation/vim-colors-solarized'
# }}}

# Status Line {{{

# Simple and efficient
[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
    let g:airline_powerline_fonts = 1
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#fnamemod = ':t'
    let g:airline_mode_map = {'n': 'NOR', 'i': 'INS', 'R': 'REP', 't': 'TER',
        \ 'V': 'VIS'}
    let g:airline#extensions#whitespace#enabled = 0
    let g:airline#extensions#fugitiveline#enabled = 1
    let g:airline#extensions#ale#enabled = 0
'''

# With some themes
[[plugins]]
repo = 'vim-airline/vim-airline-themes'

# Data from LSP
[[plugins]]
repo = 'nvim-lua/lsp-status.nvim'
# }}}

# vim:fdm=marker
