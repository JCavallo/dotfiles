\set QUIET 1

\set VERBOSITY verbose
\set ON_ERROR_ROLLBACK interactive
-- show execution times
\timing
-- limit paging
-- \pset pager off
\setenv PAGER 'pspg -bX'
-- replace nulls
\pset null Â¤
-- formatting
--  \pset format wrapped
\pset linestyle unicode
\pset border 2
--  \x auto

-- colorize
--\set PROMPT1 '%[%033[33;1m%]%x%[%033[0m%]%[%033[1m%]%/%[%033[0m%]%R%# '
\set PROMPT1 '%[%033[1m%]%M %n@%/%R%[%033[0m%]%# '
\set PROMPT1 '(%`date +%X`) %[%033[1;32m%]%M %[%033[1;31m%]%>%[%033[1;35m%] %n@%[%033[1;33m%]%/%[%033[1;31m%]%#%x %[%033[0m%]'
--harolds
--\set PROMPT1 '%[%033[1m%]%M/%/%R%[%033[0m%]%# '
\set PROMPT2 '[more] %R > '



--logging
-- Use a separate history file per-database.
\set HISTFILE ~/.psql_history- :DBNAME
-- If a command is run more than once in a row, only store it once in the
-- history.
\set HISTCONTROL ignoredups

-- Autocomplete keywords (like SELECT) in upper-case, even if you started
-- typing them in lower case.
\set COMP_KEYWORD_CASE upper

-- greeting
\echo '\nWelcome, wanderer\n'

--helpful queries
\set uptime 'select now() - backend_start as uptime from pg_stat_activity where pid = pg_backend_pid();'
\set show_slow_queries 'SELECT (total_time / 1000 / 60) as total_minutes, (total_time/calls) as average_time, query FROM pg_stat_statements ORDER BY 1 DESC LIMIT 100;'
\set settings 'select name, setting,unit,context from pg_settings;'
\set conninfo 'select usename, count(*) from pg_stat_activity group by usename;'
\set activity 'select datname, pid, usename, application_name,client_addr, client_hostname, client_port, query, state from pg_stat_activity;'
\set waits 'SELECT pg_stat_activity.pid, pg_stat_activity.query, pg_stat_activity.wait_event, pg_stat_activity.wait_event_type, now() - pg_stat_activity.query_start AS \"totaltime\", pg_stat_activity.backend_start FROM pg_stat_activity WHERE pg_stat_activity.query !~ \'%IDLE%\'::text AND pg_stat_activity.wait_event_type IS NOT NULL;'
\set dbsize 'SELECT datname, pg_size_pretty(pg_database_size(datname)) db_size FROM pg_database ORDER BY db_size;'
\set tablesize 'SELECT nspname || \'.\' || relname AS \"relation\", pg_size_pretty(pg_relation_size(C.oid)) AS "size" FROM pg_class C LEFT JOIN pg_namespace N ON (N.oid = C.relnamespace) WHERE nspname NOT IN (\'pg_catalog\', \'information_schema\') ORDER BY pg_relation_size(C.oid) DESC LIMIT 40;'
\set uselesscol 'SELECT nspname, relname, attname, typname, (stanullfrac*100)::int AS null_percent, case when stadistinct &gt;= 0 then stadistinct else abs(stadistinct)*reltuples end AS \"distinct\", case 1 when stakind1 then stavalues1 when stakind2 then stavalues2 end AS \"values\" FROM pg_class c JOIN pg_namespace ns ON (ns.oid=relnamespace) JOIN pg_attribute ON (c.oid=attrelid) JOIN pg_type t ON (t.oid=atttypid) JOIN pg_statistic ON (c.oid=starelid AND staattnum=attnum) WHERE nspname NOT LIKE E\'pg\\\\_%\' AND nspname != \'information_schema\' AND relkind=\'r\' AND NOT attisdropped AND attstattarget != 0 AND reltuples &gt;= 100 AND stadistinct BETWEEN 0 AND 1 ORDER BY nspname, relname, attname;'
\set locks 'SELECT blocked_locks.pid AS blocked_pid, blocked_activity.usename AS blocked_user, blocking_locks.pid AS blocking_pid, blocking_activity.usename AS blocking_user, blocked_activity.query AS blocked_statement, blocking_activity.query AS current_statement_in_blocking_process, blocked_activity.application_name AS blocked_application, blocking_activity.application_name AS blocking_application FROM pg_catalog.pg_locks  blocked_locks JOIN pg_catalog.pg_stat_activity blocked_activity ON blocked_activity.pid = blocked_locks.pid JOIN pg_catalog.pg_locks  blocking_locks ON blocking_locks.locktype = blocked_locks.locktype AND blocking_locks.DATABASE IS NOT DISTINCT FROM blocked_locks.DATABASE AND blocking_locks.relation IS NOT DISTINCT FROM blocked_locks.relation AND blocking_locks.page IS NOT DISTINCT FROM blocked_locks.page AND blocking_locks.tuple IS NOT DISTINCT FROM blocked_locks.tuple AND blocking_locks.virtualxid IS NOT DISTINCT FROM blocked_locks.virtualxid AND blocking_locks.transactionid IS NOT DISTINCT FROM blocked_locks.transactionid AND blocking_locks.classid IS NOT DISTINCT FROM blocked_locks.classid AND blocking_locks.objid IS NOT DISTINCT FROM blocked_locks.objid AND blocking_locks.objsubid IS NOT DISTINCT FROM blocked_locks.objsubid AND blocking_locks.pid != blocked_locks.pid JOIN pg_catalog.pg_stat_activity blocking_activity ON blocking_activity.pid = blocking_locks.pid WHERE NOT blocked_locks.GRANTED;'

-- 4 helpful queries from radek http://radek.cc/2009/08/15/psqlrc-tricks-table-sizes/
\set trashindexes '( select s.schemaname as sch, s.relname as rel, s.indexrelname as idx, s.idx_scan as scans, pg_size_pretty(pg_relation_size(s.relid)) as ts, pg_size_pretty(pg_relation_size(s.indexrelid)) as "is" from pg_stat_user_indexes s join pg_index i on i.indexrelid=s.indexrelid left join pg_constraint c on i.indrelid=c.conrelid and array_to_string(i.indkey, '' '') = array_to_string(c.conkey, '' '') where i.indisunique is false and pg_relation_size(s.relid) > 1000000 and s.idx_scan < 100000 and c.confrelid is null order by s.idx_scan asc, pg_relation_size(s.relid) desc )'
\set missingindexes '( select src_table, dst_table, fk_name, pg_size_pretty(s_size) as s_size, pg_size_pretty(d_size) as d_size, d from ( select distinct on (1,2,3,4,5) textin(regclassout(c.conrelid)) as src_table, textin(regclassout(c.confrelid)) as dst_table, c.conname as fk_name, pg_relation_size(c.conrelid) as s_size, pg_relation_size(c.confrelid) as d_size, array_upper(di.indkey::int[], 1) + 1 - array_upper(c.conkey::int[], 1) as d from pg_constraint c left join pg_index di on di.indrelid = c.conrelid and array_to_string(di.indkey, '' '') ~ (''^'' || array_to_string(c.conkey, '' '') || ''( |$)'') join pg_stat_user_tables st on st.relid = c.conrelid where c.contype = ''f'' order by 1,2,3,4,5,6 asc) mfk where mfk.d is distinct from 0 and mfk.s_size > 1000000 order by mfk.s_size desc, mfk.d desc )'
\set rtsize '(select table_schema, table_name, pg_size_pretty(pg_relation_size( quote_ident( table_schema ) || \'.\' || quote_ident( table_name ) )) as size, pg_size_pretty(pg_total_relation_size( quote_ident( table_schema ) || \'.\' || quote_ident( table_name ) )) as total_size  from information_schema.tables where table_type = \'BASE TABLE\' and table_schema not in (\'information_schema\', \'pg_catalog\') order by pg_relation_size( quote_ident( table_schema ) || \'.\' || quote_ident( table_name ) ) desc, table_schema, table_name) LIMIT 40;'
\set tempty '(select n.nspname as table_schema, c.relname as table_name from pg_class c join pg_namespace n on n.oid = c.relnamespace where c.relkind = \'r\' and n.nspname not in (\'information_schema\',\'pg_catalog\') and c.reltuples = 0 order by table_schema, table_name;)'
\set tnotempty '(select n.nspname as table_schema, c.relname as table_name from pg_class c join pg_namespace n on n.oid = c.relnamespace where c.relkind = \'r\' and n.nspname not in (\'information_schema\',\'pg_catalog\') and c.reltuples != 0 order by table_schema, table_name;)'

-- Identify indexes with lot of nulls (consider adding a "where not null" in the index definition)
\set null_indexes '( SELECT c.oid, c.relname AS index, pg_size_pretty(pg_relation_size(c.oid)) AS index_size, i.indisunique AS unique, a.attname AS indexed_column, CASE s.null_frac WHEN 0 THEN \'\' ELSE to_char(s.null_frac * 100, \'999.00%%\') END AS null_frac, pg_size_pretty((pg_relation_size(c.oid) * s.null_frac)::bigint) AS expected_saving FROM pg_class c JOIN pg_index i ON i.indexrelid = c.oid JOIN pg_attribute a ON a.attrelid = c.oid JOIN pg_class c_table ON c_table.oid = i.indrelid JOIN pg_indexes ixs ON c.relname = ixs.indexname LEFT JOIN pg_stats s ON s.tablename = c_table.relname AND a.attname = s.attname WHERE NOT i.indisprimary AND i.indpred IS NULL AND array_length(i.indkey, 1) = 1 AND coalesce(s.null_frac, 0) != 0 AND pg_relation_size(c.oid) > 10 * 1024 ^ 2 ORDER BY pg_relation_size(c.oid) * s.null_frac DESC; )'

-- Duplicate indexes
\set duplicate_indexes 'SELECT indrelid::regclass AS TableName, array_agg(indexrelid::regclass) AS indexes FROM pg_index GROUP BY indrelid ,indkey HAVING COUNT(*) > 1;'
\set index_progress 'SELECT psa.state, pspci.phase, round( ( cast(pspci.blocks_done AS numeric) / cast(greatest(pspci.blocks_total, 1) AS numeric)), 4) * 100 AS blocks, round( ( cast(pspci.tuples_done AS numeric) / cast(greatest(pspci.tuples_total, 1) AS numeric)), 4) * 100 AS tuples, round((pspci.tuples_total - pspci.tuples_done) * (pspci.tuples_done / (extract( epoch from now())  - extract(epoch from psa.query_start))) / 10000000) AS remaining, psa.query FROM pg_stat_activity AS psa INNER JOIN pg_stat_progress_create_index AS pspci ON pspci.pid = psa.pid;'

-- Table analysis
\set ttoast 'SELECT relname, pg_size_pretty(pg_relation_size(oid)) as size, pg_size_pretty(pg_relation_size(reltoastrelid)) as toast_size FROM pg_class WHERE relname = '
\set tstats 'SELECT relname, n_live_tup, n_dead_tup, last_vacuum, last_autovacuum, vacuum_count, autovacuum_count FROM pg_stat_user_tables WHERE relname = '
\set tindexes 'SELECT * FROM ( SELECT t.relname AS table_name, i.relname AS index_name, pg_size_pretty(pg_relation_size(i.relname::regclass)) AS index_size, pg_size_pretty(pg_relation_size(t.relname::regclass)) AS table_size, ROUND( 100 * pg_relation_size(i.relname::regclass) / NULLIF(pg_relation_size(t.relname::regclass), 0), 2) AS index_ratio, idx.indisunique AS is_unique, array_to_string( array_agg( a.attname ORDER BY k.i), ', ') AS indexed_columns, pg_get_indexdef(idx.indexrelid) AS index_definition FROM pg_class t JOIN pg_index idx ON t.oid = idx.indrelid JOIN pg_class i ON i.oid = idx.indexrelid JOIN pg_attribute a ON a.attrelid = t.oid JOIN generate_subscripts(idx.indkey, 1) AS k (i) ON a.attnum = idx.indkey[k.i] GROUP BY i.relname, t.relname, idx.indisunique, idx.indexrelid ORDER BY pg_relation_size(i.relname::regclass) DESC) AS a WHERE a.table_name = '
-- git clone https://github.com/NikolayS/postgres_dba.git
-- \echo ð§ ð postgres_dba 6.0 installed. Use ":dba" to see menu
-- \set dba '\\i /tmp/postgres_dba/start.psql'

\unset QUIET
-- vim:ft=sql:
